<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Feb 13 05:54:14 2022
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; nes_main &rArr; NesFrameCycle &rArr; NES_RenderLine &rArr; NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[39]">CAU_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[33]">CMP0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[34]">CMP1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2b]">DAC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[32]">DMAMUX_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[11]">DMA_Channel0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[12]">DMA_Channel1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[13]">DMA_Channel2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[14]">DMA_Channel3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[15]">DMA_Channel4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[16]">DMA_Channel5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[17]">DMA_Channel6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[c]">EXTI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[31]">EXTI10_15_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[d]">EXTI1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[e]">EXTI2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[f]">EXTI3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[10]">EXTI4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[30]">EXTI5_9_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[a]">FMC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32l23x_it.o(.text.HardFault_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[26]">I2C0_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[25]">I2C0_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[35]">I2C0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3d]">I2C1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[36]">I2C2_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3f]">LPTIMER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[38]">LPUART_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3e]">LPUART_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32l23x_it.o(.text.NMI_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from gd32l23x_it.o(.text.PendSV_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[b]">RCU_CTC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[9]">RTC_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3b]">SLCD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[29]">SPI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from gd32l23x_it.o(.text.SVC_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from gd32l23x_it.o(.text.SysTick_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_gd32l23x.o(.text.SystemInit) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[8]">TAMPER_STAMP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1e]">TIMER11_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1b]">TIMER1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1c]">TIMER2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1f]">TIMER5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[20]">TIMER6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1d]">TIMER8_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3a]">TRNG_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[24]">UART4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[21]">USART0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[37]">USART0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3c]">USART1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[19]">USBD_HP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[1a]">USBD_LP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2f]">USBD_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[4e]">abs6502</a> from 6502.o(.text.abs6502) referenced 26 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[58]">absx6502</a> from 6502.o(.text.absx6502) referenced 17 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[56]">absy6502</a> from 6502.o(.text.absy6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6c]">adc6502</a> from 6502.o(.text.adc6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5a]">and6502</a> from 6502.o(.text.and6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[4a]">asl6502</a> from 6502.o(.text.asl6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[4d]">asla6502</a> from 6502.o(.text.asla6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7c]">bcc6502</a> from 6502.o(.text.bcc6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[85]">bcs6502</a> from 6502.o(.text.bcs6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[94]">beq6502</a> from 6502.o(.text.beq6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5b]">bit6502</a> from 6502.o(.text.bit6502) referenced 5 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5f]">bmi6502</a> from 6502.o(.text.bmi6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8d]">bne6502</a> from 6502.o(.text.bne6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[4f]">bpl6502</a> from 6502.o(.text.bpl6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[76]">bra6502</a> from 6502.o(.text.bra6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[43]">brk6502</a> from 6502.o(.text.brk6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[68]">bvc6502</a> from 6502.o(.text.bvc6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[72]">bvs6502</a> from 6502.o(.text.bvs6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[55]">clc6502</a> from 6502.o(.text.clc6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8e]">cld6502</a> from 6502.o(.text.cld6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[69]">cli6502</a> from 6502.o(.text.cli6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[86]">clv6502</a> from 6502.o(.text.clv6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[89]">cmp6502</a> from 6502.o(.text.cmp6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[90]">cpx6502</a> from 6502.o(.text.cpx6502) referenced 3 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[88]">cpy6502</a> from 6502.o(.text.cpy6502) referenced 3 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[61]">dea6502</a> from 6502.o(.text.dea6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8a]">dec6502</a> from 6502.o(.text.dec6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8c]">dex6502</a> from 6502.o(.text.dex6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7a]">dey6502</a> from 6502.o(.text.dey6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[63]">eor6502</a> from 6502.o(.text.eor6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[4c]">immediate6502</a> from 6502.o(.text.immediate6502) referenced 12 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[44]">implied6502</a> from 6502.o(.text.implied6502) referenced 114 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[57]">ina6502</a> from 6502.o(.text.ina6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[92]">inc6502</a> from 6502.o(.text.inc6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[75]">indabsx6502</a> from 6502.o(.text.indabsx6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[71]">indirect6502</a> from 6502.o(.text.indirect6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[46]">indx6502</a> from 6502.o(.text.indx6502) referenced 8 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[51]">indy6502</a> from 6502.o(.text.indy6502) referenced 8 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[52]">indzp6502</a> from 6502.o(.text.indzp6502) referenced 8 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[93]">inx6502</a> from 6502.o(.text.inx6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8b]">iny6502</a> from 6502.o(.text.iny6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[67]">jmp6502</a> from 6502.o(.text.jmp6502) referenced 3 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[59]">jsr6502</a> from 6502.o(.text.jsr6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[81]">lda6502</a> from 6502.o(.text.lda6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[82]">ldx6502</a> from 6502.o(.text.ldx6502) referenced 5 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[80]">ldy6502</a> from 6502.o(.text.ldy6502) referenced 5 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[64]">lsr6502</a> from 6502.o(.text.lsr6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[66]">lsra6502</a> from 6502.o(.text.lsra6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[40]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[47]">nop6502</a> from 6502.o(.text.nop6502) referenced 78 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[45]">ora6502</a> from 6502.o(.text.ora6502) referenced 10 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[65]">pha6502</a> from 6502.o(.text.pha6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[4b]">php6502</a> from 6502.o(.text.php6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[8f]">phx6502</a> from 6502.o(.text.phx6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6a]">phy6502</a> from 6502.o(.text.phy6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6f]">pla6502</a> from 6502.o(.text.pla6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5d]">plp6502</a> from 6502.o(.text.plp6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[96]">plx6502</a> from 6502.o(.text.plx6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[74]">ply6502</a> from 6502.o(.text.ply6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[50]">relative6502</a> from 6502.o(.text.relative6502) referenced 8 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5c]">rol6502</a> from 6502.o(.text.rol6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[5e]">rola6502</a> from 6502.o(.text.rola6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6e]">ror6502</a> from 6502.o(.text.ror6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[70]">rora6502</a> from 6502.o(.text.rora6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[62]">rti6502</a> from 6502.o(.text.rti6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6b]">rts6502</a> from 6502.o(.text.rts6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[91]">sbc6502</a> from 6502.o(.text.sbc6502) referenced 9 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[60]">sec6502</a> from 6502.o(.text.sec6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[95]">sed6502</a> from 6502.o(.text.sed6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[73]">sei6502</a> from 6502.o(.text.sei6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[77]">sta6502</a> from 6502.o(.text.sta6502) referenced 8 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[79]">stx6502</a> from 6502.o(.text.stx6502) referenced 3 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[78]">sty6502</a> from 6502.o(.text.sty6502) referenced 3 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[6d]">stz6502</a> from 6502.o(.text.stz6502) referenced 4 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[84]">tax6502</a> from 6502.o(.text.tax6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[83]">tay6502</a> from 6502.o(.text.tay6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[53]">trb6502</a> from 6502.o(.text.trb6502) referenced 2 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[48]">tsb6502</a> from 6502.o(.text.tsb6502) referenced 2 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[87]">tsx6502</a> from 6502.o(.text.tsx6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7b]">txa6502</a> from 6502.o(.text.txa6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7f]">txs6502</a> from 6502.o(.text.txs6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7e]">tya6502</a> from 6502.o(.text.tya6502) referenced from 6502.o(.rodata.opcodetable)
 <LI><a href="#[49]">zp6502</a> from 6502.o(.text.zp6502) referenced 24 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[54]">zpx6502</a> from 6502.o(.text.zpx6502) referenced 18 times from 6502.o(.rodata.opcodetable)
 <LI><a href="#[7d]">zpy6502</a> from 6502.o(.text.zpy6502) referenced 2 times from 6502.o(.rodata.opcodetable)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[97]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USBD_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_Init
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_Init
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ca]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[da]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>Init_ILI9325</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, 9235.o(.text.Init_ILI9325))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Init_ILI9325 &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Init_data</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, 9235.o(.text.Init_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPos
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ILI9325
</UL>

<P><STRONG><a name="[a4]"></a>LCD_SetPos</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, 9235.o(.text.LCD_SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_RGB
</UL>

<P><STRONG><a name="[c4]"></a>NES_GetJoyPadVlaue</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, joypad.o(.text.NES_GetJoyPadVlaue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NES_GetJoyPadVlaue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>

<P><STRONG><a name="[ae]"></a>NES_GetSpr0HitFlag</STRONG> (Thumb, 668 bytes, Stack size 100 bytes, ppu.o(.text.NES_GetSpr0HitFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NES_GetSpr0HitFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[cd]"></a>NES_JoyPadInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, joypad.o(.text.NES_JoyPadInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[cf]"></a>NES_JoyPadReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, joypad.o(.text.NES_JoyPadReset))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>

<P><STRONG><a name="[af]"></a>NES_JoyPadUpdateValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nes_main.o(.text.NES_JoyPadUpdateValue))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[a5]"></a>NES_LCD_DisplayLine</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ppu.o(.text.NES_LCD_DisplayLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data_U16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[aa]"></a>NES_RenderBGLine</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, ppu.o(.text.NES_RenderBGLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NES_RenderBGLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[a7]"></a>NES_RenderLine</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, ppu.o(.text.NES_RenderLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NES_RenderLine &rArr; NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite88
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite16
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderBGLine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[ab]"></a>NES_RenderSprPattern</STRONG> (Thumb, 376 bytes, Stack size 44 bytes, ppu.o(.text.NES_RenderSprPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite88
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite16
</UL>

<P><STRONG><a name="[a8]"></a>NES_RenderSprite16</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ppu.o(.text.NES_RenderSprite16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NES_RenderSprite16 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[a9]"></a>NES_RenderSprite88</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ppu.o(.text.NES_RenderSprite88))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NES_RenderSprite88 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>NesFrameCycle</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, nes_main.o(.text.NesFrameCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NesFrameCycle &rArr; NES_RenderLine &rArr; NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_JoyPadUpdateValue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_GetSpr0HitFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec6502
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[b0]"></a>PPU_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ppu.o(.text.PPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PPU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[b2]"></a>PPU_MemRead</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ppu.o(.text.PPU_MemRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_NameTablesRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegRead
</UL>

<P><STRONG><a name="[b4]"></a>PPU_MemWrite</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ppu.o(.text.PPU_MemWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_NameTablesWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegWrite
</UL>

<P><STRONG><a name="[b3]"></a>PPU_NameTablesRead</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ppu.o(.text.PPU_NameTablesRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPU_NameTablesRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemRead
</UL>

<P><STRONG><a name="[b5]"></a>PPU_NameTablesWrite</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, ppu.o(.text.PPU_NameTablesWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPU_NameTablesWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemWrite
</UL>

<P><STRONG><a name="[b6]"></a>PPU_RegRead</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ppu.o(.text.PPU_RegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>

<P><STRONG><a name="[b7]"></a>PPU_RegWrite</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, ppu.o(.text.PPU_RegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>Show_RGB</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, 9235.o(.text.Show_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Show_RGB &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data_U16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>SprDMA</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, 6502.o(.text.SprDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SprDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32l23x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, system_gd32l23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_64m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>Write_Cmd</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, 9235.o(.text.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_Cmd &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_port_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_port_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPos
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_data
</UL>

<P><STRONG><a name="[a3]"></a>Write_Data</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, 9235.o(.text.Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_port_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_port_get
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data_U16
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_data
</UL>

<P><STRONG><a name="[a6]"></a>Write_Data_U16</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, 9235.o(.text.Write_Data_U16))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_Data_U16 &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_RGB
</UL>

<P><STRONG><a name="[4e]"></a>abs6502</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, 6502.o(.text.abs6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = abs6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[58]"></a>absx6502</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, 6502.o(.text.absx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = absx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[56]"></a>absy6502</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, 6502.o(.text.absy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = absy6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6c]"></a>adc6502</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, 6502.o(.text.adc6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adc6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[5a]"></a>and6502</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, 6502.o(.text.and6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = and6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[4a]"></a>asl6502</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, 6502.o(.text.asl6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = asl6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[4d]"></a>asla6502</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, 6502.o(.text.asla6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7c]"></a>bcc6502</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 6502.o(.text.bcc6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bcc6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[85]"></a>bcs6502</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 6502.o(.text.bcs6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bcs6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[94]"></a>beq6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.beq6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = beq6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[5b]"></a>bit6502</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, 6502.o(.text.bit6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bit6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[5f]"></a>bmi6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.bmi6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmi6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[8d]"></a>bne6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.bne6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bne6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[4f]"></a>bpl6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.bpl6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bpl6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[76]"></a>bra6502</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, 6502.o(.text.bra6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bra6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[43]"></a>brk6502</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, 6502.o(.text.brk6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = brk6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[68]"></a>bvc6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.bvc6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bvc6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[72]"></a>bvs6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.bvs6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bvs6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[55]"></a>clc6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.clc6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[8e]"></a>cld6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.cld6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[69]"></a>cli6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.cli6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[86]"></a>clv6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.clv6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[89]"></a>cmp6502</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, 6502.o(.text.cmp6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cmp6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[90]"></a>cpx6502</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, 6502.o(.text.cpx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cpx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[88]"></a>cpy6502</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, 6502.o(.text.cpy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cpy6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[61]"></a>dea6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.dea6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[8a]"></a>dec6502</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, 6502.o(.text.dec6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dec6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[a0]"></a>delay_1ms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, systick.o(.text.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ILI9325
</UL>

<P><STRONG><a name="[bb]"></a>delay_decrement</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8c]"></a>dex6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.dex6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7a]"></a>dey6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.dey6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[63]"></a>eor6502</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, 6502.o(.text.eor6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eor6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[ad]"></a>exec6502</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, 6502.o(.text.exec6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = exec6502 &rArr; nmi6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi6502
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq6502
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[c0]"></a>get6502memory</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, 6502.o(.text.get6502memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegRead
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_GetJoyPadVlaue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpy6502
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zpx6502
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zp6502
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsb6502
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trb6502
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc6502
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rts6502
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rti6502
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ror6502
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol6502
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset6502
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relative6502
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ply6502
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plx6502
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plp6502
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pla6502
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ora6502
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi6502
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsr6502
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldy6502
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldx6502
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lda6502
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq6502
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indzp6502
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indy6502
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indx6502
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indirect6502
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indabsx6502
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc6502
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec6502
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eor6502
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec6502
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpy6502
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpx6502
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp6502
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvs6502
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvc6502
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brk6502
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpl6502
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bne6502
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi6502
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit6502
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beq6502
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcs6502
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcc6502
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asl6502
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;and6502
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc6502
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absy6502
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absx6502
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs6502
</UL>

<P><STRONG><a name="[9f]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ILI9325
</UL>

<P><STRONG><a name="[9e]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ILI9325
</UL>

<P><STRONG><a name="[c7]"></a>gpio_mode_set</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, gd32l23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>gpio_output_options_set</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gd32l23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>gpio_output_port_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32l23x_gpio.o(.text.gpio_output_port_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_output_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[bf]"></a>gpio_port_write</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_port_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[4c]"></a>immediate6502</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 6502.o(.text.immediate6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[44]"></a>implied6502</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 6502.o(.text.implied6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[57]"></a>ina6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.ina6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[92]"></a>inc6502</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, 6502.o(.text.inc6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inc6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[75]"></a>indabsx6502</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, 6502.o(.text.indabsx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indabsx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[71]"></a>indirect6502</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, 6502.o(.text.indirect6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indirect6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[46]"></a>indx6502</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, 6502.o(.text.indx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[51]"></a>indy6502</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, 6502.o(.text.indy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indy6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[52]"></a>indzp6502</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, 6502.o(.text.indzp6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = indzp6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[cb]"></a>init6502mem</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, 6502.o(.text.init6502mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init6502mem
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[93]"></a>inx6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.inx6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[8b]"></a>iny6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.iny6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[c3]"></a>irq6502</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, 6502.o(.text.irq6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = irq6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec6502
</UL>

<P><STRONG><a name="[67]"></a>jmp6502</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 6502.o(.text.jmp6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jmp6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[59]"></a>jsr6502</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, 6502.o(.text.jsr6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jsr6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[81]"></a>lda6502</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, 6502.o(.text.lda6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lda6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[82]"></a>ldx6502</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, 6502.o(.text.ldx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ldx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[80]"></a>ldy6502</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, 6502.o(.text.ldy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ldy6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[64]"></a>lsr6502</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, 6502.o(.text.lsr6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lsr6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[66]"></a>lsra6502</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, 6502.o(.text.lsra6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsra6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; nes_main &rArr; NesFrameCycle &rArr; NES_RenderLine &rArr; NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_RGB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ILI9325
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c9]"></a>nes_main</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nes_main.o(.text.nes_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nes_main &rArr; NesFrameCycle &rArr; NES_RenderLine &rArr; NES_LCD_DisplayLine &rArr; LCD_SetPos &rArr; Init_data &rArr; Write_Data &rArr; gpio_port_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_JoyPadInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset6502
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init6502mem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>nmi6502</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, 6502.o(.text.nmi6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nmi6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec6502
</UL>

<P><STRONG><a name="[47]"></a>nop6502</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 6502.o(.text.nop6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[bd]"></a>nvic_vector_table_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32l23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[45]"></a>ora6502</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, 6502.o(.text.ora6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ora6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[65]"></a>pha6502</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 6502.o(.text.pha6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pha6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[4b]"></a>php6502</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 6502.o(.text.php6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = php6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[8f]"></a>phx6502</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 6502.o(.text.phx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = phx6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6a]"></a>phy6502</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 6502.o(.text.phy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = phy6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6f]"></a>pla6502</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, 6502.o(.text.pla6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pla6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[5d]"></a>plp6502</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 6502.o(.text.plp6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = plp6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[96]"></a>plx6502</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, 6502.o(.text.plx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = plx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[74]"></a>ply6502</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, 6502.o(.text.ply6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ply6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[c1]"></a>put6502memory</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, 6502.o(.text.put6502memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprDMA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegWrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_JoyPadReset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsb6502
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trb6502
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stz6502
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sty6502
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stx6502
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta6502
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ror6502
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol6502
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy6502
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phx6502
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;php6502
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pha6502
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi6502
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsr6502
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsr6502
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq6502
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc6502
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec6502
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brk6502
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asl6502
</UL>

<P><STRONG><a name="[c6]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>relative6502</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 6502.o(.text.relative6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = relative6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[cc]"></a>reset6502</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, 6502.o(.text.reset6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = reset6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[5c]"></a>rol6502</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, 6502.o(.text.rol6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rol6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[5e]"></a>rola6502</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, 6502.o(.text.rola6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rola6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6e]"></a>ror6502</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, 6502.o(.text.ror6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ror6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[70]"></a>rora6502</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, 6502.o(.text.rora6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rora6502
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[62]"></a>rti6502</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, 6502.o(.text.rti6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rti6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6b]"></a>rts6502</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, 6502.o(.text.rts6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rts6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[91]"></a>sbc6502</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, 6502.o(.text.sbc6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sbc6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[60]"></a>sec6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.sec6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[95]"></a>sed6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.sed6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[73]"></a>sei6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.sei6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[77]"></a>sta6502</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 6502.o(.text.sta6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sta6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[79]"></a>stx6502</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 6502.o(.text.stx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stx6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[78]"></a>sty6502</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 6502.o(.text.sty6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sty6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[6d]"></a>stz6502</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 6502.o(.text.stz6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stz6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[c5]"></a>systick_config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, systick.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>tax6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.tax6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[83]"></a>tay6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.tay6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[53]"></a>trb6502</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, 6502.o(.text.trb6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = trb6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[48]"></a>tsb6502</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, 6502.o(.text.tsb6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tsb6502 &rArr; put6502memory &rArr; PPU_RegWrite &rArr; PPU_MemWrite &rArr; PPU_NameTablesWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put6502memory
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[87]"></a>tsx6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.tsx6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7b]"></a>txa6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.txa6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7f]"></a>txs6502</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 6502.o(.text.txs6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7e]"></a>tya6502</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, 6502.o(.text.tya6502))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[49]"></a>zp6502</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 6502.o(.text.zp6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = zp6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[54]"></a>zpx6502</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 6502.o(.text.zpx6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = zpx6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[7d]"></a>zpy6502</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 6502.o(.text.zpy6502))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = zpy6502 &rArr; get6502memory &rArr; PPU_RegRead &rArr; PPU_MemRead &rArr; PPU_NameTablesRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get6502memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(.rodata.opcodetable)
</UL>
<P><STRONG><a name="[db]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[dc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[dd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b9]"></a>SysTick_Config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[ba]"></a>__NVIC_SetPriority</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[d0]"></a>system_clock_64m_hxtal</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, system_gd32l23x.o(.text.system_clock_64m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_64m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[bc]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32l23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_clock_config &rArr; system_clock_64m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_64m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
