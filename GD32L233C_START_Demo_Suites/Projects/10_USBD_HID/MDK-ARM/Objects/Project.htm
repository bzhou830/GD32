<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Mar 18 18:21:32 2022
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_LP_IRQHandler &rArr; usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">SysTick_Handler</a><BR>
 <LI><a href="#[3e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5f]">CAU_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[59]">CMP0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5a]">CMP1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[51]">DAC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[58]">DMAMUX_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[37]">DMA_Channel0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[38]">DMA_Channel1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[39]">DMA_Channel2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3a]">DMA_Channel3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3b]">DMA_Channel4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3c]">DMA_Channel5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3d]">DMA_Channel6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[57]">EXTI10_15_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[56]">EXTI5_9_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[30]">FMC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[28]">HardFault_Handler</a> from gd32l23x_it.o(.text.HardFault_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4c]">I2C0_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4b]">I2C0_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5b]">I2C0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4e]">I2C1_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4d]">I2C1_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[63]">I2C1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[53]">I2C2_ER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[52]">I2C2_EV_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5c]">I2C2_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[65]">LPTIMER_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5e]">LPUART_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[64]">LPUART_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2d]">LVD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[27]">NMI_Handler</a> from gd32l23x_it.o(.text.NMI_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from gd32l23x_it.o(.text.PendSV_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[31]">RCU_CTC_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[54]">RTC_Alarm_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2f]">RTC_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[61]">SLCD_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4f]">SPI0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[50]">SPI1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[29]">SVC_Handler</a> from gd32l23x_it.o(.text.SVC_Handler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2b]">SysTick_Handler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_gd32l23x.o(.text.SystemInit) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[2e]">TAMPER_STAMP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[44]">TIMER11_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[41]">TIMER1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[42]">TIMER2_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[45]">TIMER5_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[46]">TIMER6_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[43]">TIMER8_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[60]">TRNG_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[49]">UART3_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[47]">USART0_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[5d]">USART0_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[62]">USART1_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[3f]">USBD_HP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[40]">USBD_LP_IRQHandler</a> from gd32l23x_it.o(.text.USBD_LP_IRQHandler) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[55]">USBD_WKUP_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[2c]">WWDGT_IRQHandler</a> from startup_gd32l23x.o(.text) referenced from startup_gd32l23x.o(RESET)
 <LI><a href="#[68]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32l23x.o(.text)
 <LI><a href="#[14]">_usb_config_desc_get</a> from usbd_enum.o(.text._usb_config_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[13]">_usb_dev_desc_get</a> from usbd_enum.o(.text._usb_dev_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[6b]">_usb_in0_transc</a> from usbd_transc.o(.text._usb_in0_transc) referenced from usbd_core.o(.text.usbd_init)
 <LI><a href="#[6a]">_usb_out0_transc</a> from usbd_transc.o(.text._usb_out0_transc) referenced from usbd_core.o(.text.usbd_init)
 <LI><a href="#[69]">_usb_setup_transc</a> from usbd_transc.o(.text._usb_setup_transc) referenced from usbd_core.o(.text.usbd_init)
 <LI><a href="#[1]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[7]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[5]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[9]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[0]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[2]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 4 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[4]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[8]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[6]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[3]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[a]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[b]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced 2 times from usbd_enum.o(.data._std_dev_req)
 <LI><a href="#[15]">_usb_str_desc_get</a> from usbd_enum.o(.text._usb_str_desc_get) referenced 2 times from usbd_enum.o(.data.std_desc_get)
 <LI><a href="#[f]">custom_hid_data_in</a> from custom_hid_core.o(.text.custom_hid_data_in) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[10]">custom_hid_data_out</a> from custom_hid_core.o(.text.custom_hid_data_out) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[d]">custom_hid_deinit</a> from custom_hid_core.o(.text.custom_hid_deinit) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[c]">custom_hid_init</a> from custom_hid_core.o(.text.custom_hid_init) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[e]">custom_hid_req_handler</a> from custom_hid_core.o(.text.custom_hid_req_handler) referenced 2 times from custom_hid_core.o(.data.custom_hid_class)
 <LI><a href="#[11]">key_config</a> from custom_hid_itf.o(.text.key_config) referenced 2 times from custom_hid_itf.o(.data.fop_handler)
 <LI><a href="#[12]">led_config</a> from custom_hid_itf.o(.text.led_config) referenced 2 times from custom_hid_itf.o(.data.fop_handler)
 <LI><a href="#[66]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[19]">usbd_address_set</a> from usbd_lld_core.o(.text.usbd_address_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[16]">usbd_core_reset</a> from usbd_lld_core.o(.text.usbd_core_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[17]">usbd_core_stop</a> from usbd_lld_core.o(.text.usbd_core_stop) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[18]">usbd_dp_pullup</a> from usbd_lld_core.o(.text.usbd_dp_pullup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[22]">usbd_ep_data_read</a> from usbd_lld_core.o(.text.usbd_ep_data_read) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[21]">usbd_ep_data_write</a> from usbd_lld_core.o(.text.usbd_ep_data_write) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1f]">usbd_ep_disable</a> from usbd_lld_core.o(.text.usbd_ep_disable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1d]">usbd_ep_reset</a> from usbd_lld_core.o(.text.usbd_ep_reset) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[20]">usbd_ep_rx_enable</a> from usbd_lld_core.o(.text.usbd_ep_rx_enable) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1e]">usbd_ep_setup</a> from usbd_lld_core.o(.text.usbd_ep_setup) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[24]">usbd_ep_stall_clear</a> from usbd_lld_core.o(.text.usbd_ep_stall_clear) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[23]">usbd_ep_stall_set</a> from usbd_lld_core.o(.text.usbd_ep_stall_set) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[25]">usbd_ep_status</a> from usbd_lld_core.o(.text.usbd_ep_status) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1b]">usbd_leave_suspend</a> from usbd_lld_core.o(.text.usbd_leave_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1c]">usbd_resume</a> from usbd_lld_core.o(.text.usbd_resume) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
 <LI><a href="#[1a]">usbd_suspend</a> from usbd_lld_core.o(.text.usbd_suspend) referenced 2 times from usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMAMUX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBD_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32l23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32l23x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, system_gd32l23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_48m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>USBD_LP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32l23x_it.o(.text.USBD_LP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_LP_IRQHandler &rArr; usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32l23x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>_usb_in0_transc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_in0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_in0_transc &rArr; usb_ctl_out
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_0len_packet_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[6a]"></a>_usb_out0_transc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_transc.o(.text._usb_out0_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _usb_out0_transc &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[69]"></a>_usb_setup_transc</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbd_transc.o(.text._usb_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _usb_setup_transc &rArr; usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_status_in
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_out
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.text.usbd_init)
</UL>
<P><STRONG><a name="[89]"></a>custom_hid_itfop_register</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, custom_hid_core.o(.text.custom_hid_itfop_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = custom_hid_itfop_register
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_config
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_data_out
</UL>

<P><STRONG><a name="[7f]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32l23x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_data_out
</UL>

<P><STRONG><a name="[86]"></a>gpio_mode_set</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, gd32l23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_config
</UL>

<P><STRONG><a name="[87]"></a>gpio_output_options_set</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gd32l23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_config
</UL>

<P><STRONG><a name="[66]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; usbd_init &rArr; serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_itfop_register
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8b]"></a>nvic_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32l23x_usbd_hw.o(.text.nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvic_config &rArr; nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>nvic_irq_enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_config
</UL>

<P><STRONG><a name="[70]"></a>nvic_vector_table_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32l23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[88]"></a>rcu_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32l23x_usbd_hw.o(.text.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_config &rArr; rcu_usbd_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usbd_clock_config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[90]"></a>rcu_usbd_clock_config</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32l23x_rcu.o(.text.rcu_usbd_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rcu_usbd_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
</UL>

<P><STRONG><a name="[91]"></a>serial_string_get</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[78]"></a>usbd_class_request</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[81]"></a>usbd_ep_recev</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_data_out
</UL>

<P><STRONG><a name="[94]"></a>usbd_ep_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctl_data_in
</UL>

<P><STRONG><a name="[8a]"></a>usbd_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_init &rArr; serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>usbd_isr</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, usbd_lld_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_isr &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LP_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>usbd_standard_request</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[79]"></a>usbd_vendor_request</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_vendor_request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>usbd_connect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>key_config</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, custom_hid_itf.o(.text.key_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = key_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_itf.o(.data.fop_handler)
</UL>
<P><STRONG><a name="[12]"></a>led_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, custom_hid_itf.o(.text.led_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_config &rArr; gpio_bit_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_itf.o(.data.fop_handler)
</UL>
<P><STRONG><a name="[93]"></a>system_clock_48m_hxtal</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, system_gd32l23x.o(.text.system_clock_48m_hxtal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_clock_48m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[6f]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32l23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_clock_config &rArr; system_clock_48m_hxtal
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_48m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gd32l23x_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gd32l23x_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[19]"></a>usbd_address_set</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_address_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_address_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[16]"></a>usbd_core_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_reset))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[17]"></a>usbd_core_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_core_stop))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[18]"></a>usbd_dp_pullup</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_dp_pullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_dp_pullup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[22]"></a>usbd_ep_data_read</STRONG> (Thumb, 268 bytes, Stack size 28 bytes, usbd_lld_core.o(.text.usbd_ep_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_ep_data_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[21]"></a>usbd_ep_data_write</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, usbd_lld_core.o(.text.usbd_ep_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1f]"></a>usbd_ep_disable</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1d]"></a>usbd_ep_reset</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[20]"></a>usbd_ep_rx_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_lld_core.o(.text.usbd_ep_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_rx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1e]"></a>usbd_ep_setup</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, usbd_lld_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ep_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[24]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[23]"></a>usbd_ep_stall_set</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, usbd_lld_core.o(.text.usbd_ep_stall_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_ep_stall_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[25]"></a>usbd_ep_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_lld_core.o(.text.usbd_ep_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1b]"></a>usbd_leave_suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_leave_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1c]"></a>usbd_resume</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, usbd_lld_core.o(.text.usbd_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usbd_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[1a]"></a>usbd_suspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lld_core.o(.text.usbd_suspend))
<BR>[Address Reference Count : 1]<UL><LI> usbd_lld_core.o(.data.usbd_drv_handler)
</UL>
<P><STRONG><a name="[99]"></a>resume_mcu</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.resume_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resume_mcu
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[97]"></a>usbd_int_suspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_int_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_int_suspend &rArr; usbd_to_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[98]"></a>usbd_to_suspend</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_lld_int.o(.text.usbd_to_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_to_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
</UL>

<P><STRONG><a name="[96]"></a>usb_transc_config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>

<P><STRONG><a name="[7d]"></a>_usb_bos_desc_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_bos_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_bos_desc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[14]"></a>_usb_config_desc_get</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_config_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_config_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[13]"></a>_usb_dev_desc_get</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_dev_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_dev_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[1]"></a>_usb_std_clearfeature</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _usb_std_clearfeature &rArr; usbd_ep_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[7]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_getconfiguration &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[5]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _usb_std_getdescriptor &rArr; _usb_bos_desc_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_bos_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[9]"></a>_usb_std_getinterface</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _usb_std_getinterface &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[0]"></a>_usb_std_getstatus</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _usb_std_getstatus &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[2]"></a>_usb_std_reserved</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_reserved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[4]"></a>_usb_std_setaddress</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _usb_std_setaddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[8]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[6]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setdescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[3]"></a>_usb_std_setfeature</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _usb_std_setfeature &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[a]"></a>_usb_std_setinterface</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[b]"></a>_usb_std_synchframe</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_synchframe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data._std_dev_req)
</UL>
<P><STRONG><a name="[15]"></a>_usb_str_desc_get</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, usbd_enum.o(.text._usb_str_desc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _usb_str_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.data.std_desc_get)
</UL>
<P><STRONG><a name="[92]"></a>int_to_unicode</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_enum.o(.text.int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>

<P><STRONG><a name="[7c]"></a>usb_transc_config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_enum.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getstatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getinterface
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getconfiguration
</UL>

<P><STRONG><a name="[7b]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_clearfeature
</UL>

<P><STRONG><a name="[7e]"></a>usbd_ep_stall</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_enum.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setfeature
</UL>

<P><STRONG><a name="[72]"></a>usb_0len_packet_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_0len_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_0len_packet_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[7a]"></a>usb_ctl_data_in</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_ctl_data_in &rArr; usbd_ep_send &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[73]"></a>usb_ctl_out</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_out
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_in0_transc
</UL>

<P><STRONG><a name="[75]"></a>usb_ctl_status_in</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_ctl_status_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_ctl_status_in
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[76]"></a>usb_stall_transc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_transc.o(.text.usb_stall_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_stall_transc &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_setup_transc
</UL>

<P><STRONG><a name="[74]"></a>usb_transc_config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_transc.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_out0_transc
</UL>

<P><STRONG><a name="[95]"></a>usbd_ep_stall</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_transc.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stall_transc
</UL>

<P><STRONG><a name="[f]"></a>custom_hid_data_in</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, custom_hid_core.o(.text.custom_hid_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = custom_hid_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[10]"></a>custom_hid_data_out</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, custom_hid_core.o(.text.custom_hid_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = custom_hid_data_out &rArr; usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[d]"></a>custom_hid_deinit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, custom_hid_core.o(.text.custom_hid_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = custom_hid_deinit &rArr; usbd_ep_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[c]"></a>custom_hid_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, custom_hid_core.o(.text.custom_hid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = custom_hid_init &rArr; usbd_ep_recev &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[e]"></a>custom_hid_req_handler</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, custom_hid_core.o(.text.custom_hid_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = custom_hid_req_handler &rArr; usb_transc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_hid_core.o(.data.custom_hid_class)
</UL>
<P><STRONG><a name="[84]"></a>usb_transc_config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, custom_hid_core.o(.text.usb_transc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_req_handler
</UL>

<P><STRONG><a name="[82]"></a>usbd_ep_deinit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, custom_hid_core.o(.text.usbd_ep_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_deinit
</UL>

<P><STRONG><a name="[83]"></a>usbd_ep_init</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, custom_hid_core.o(.text.usbd_ep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_hid_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
